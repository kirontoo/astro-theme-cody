---
import type { MarkdownHeading } from "astro";
import TableOfContentsHeading from "@/components/TableOfContentsHeading";
import { useUITranslations, type SupportedLanguage } from "@/utils";
const { headings } = Astro.props;
const toc = buildToc(headings);

// https://github.com/chrismwilliams/astro-theme-cactus/blob/a85e0e559d3f92b32e73990486c0574b2b733227/src/utils/generateToc.ts
export interface TocItem extends MarkdownHeading {
	subheadings: Array<TocItem>;
}

function diveChildren(item: TocItem, depth: number): Array<TocItem> {
	if (depth === 1 || !item.subheadings.length) {
		return item.subheadings;
	} else {
		// e.g., 2
		return diveChildren(
			item.subheadings[item.subheadings.length - 1] as TocItem,
			depth - 1,
		);
	}
}

function buildToc(headings: ReadonlyArray<MarkdownHeading>) {
	// this ignores/filters out h1 element(s)
	const bodyHeadings = headings.filter(({ depth }) => depth > 1);
	const toc: Array<TocItem> = [];

	bodyHeadings.forEach((h) => {
		const heading: TocItem = { ...h, subheadings: [] };

		// add h2 elements into the top level
		if (heading.depth === 2) {
			toc.push(heading);
		} else {
			const lastItemInToc = toc[toc.length - 1]!;
			if (heading.depth < lastItemInToc.depth) {
				throw new Error(`Orphan heading found: ${heading.text}.`);
			}

			// higher depth
			// push into children, or children's children
			const gap = heading.depth - lastItemInToc.depth;
			const target = diveChildren(lastItemInToc, gap);
			target.push(heading);
		}
	});
	return toc;
}

const { lang } = Astro.params;
const translate = useUITranslations(lang as SupportedLanguage);
---

<nav class="sticky top-20 order-2 hidden basis-64 lg:block">
	<hr />
	<h2 class="font-bold text-lg">
		{translate("sidebar.tableOfContents").text}
	</h2>
	<ul class="-me-32" id="toc">
		{toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
	</ul>
</nav>

<script>
	const toc = document.getElementById("toc");
	if (toc) {
		toc?.addEventListener("click", (e) => {
			const prevHeading = window.location.hash.slice(1);
			const prevLink = document.getElementById(`toc-${prevHeading}`);

			// remove active class from prev heading
			if (prevLink instanceof HTMLElement) {
				prevLink?.classList.remove("active-toc");
			}

			// add active class to current heading
			if (e.target instanceof HTMLElement) {
				e.target.classList.add("active-toc");
			}
		});
	}
</script>
