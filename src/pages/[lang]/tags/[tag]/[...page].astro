---
import type { Page, GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import BaseLayout from "@/layouts/Base";
import {
	getAllPosts,
	getSupportedLanguages,
	filterByLanguage,
	getUniqueTags,
	sortMDByDate,
	getPostsByTag,
	type SupportedLanguage,
} from "@/utils";
import PostPreview from "@/components/blog/PostPreviewA";
// Alternative post item
// import PostPreview from '@/components/blog/PostPreviewB';

import Pagination from "@/components/Pagination";
import { siteConfig } from "src/consts";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	const allPosts = await getAllPosts();
	const allPostsByDate = sortMDByDate(allPosts);
	const uniqueTags = getUniqueTags(allPostsByDate);

	return getSupportedLanguages().flatMap((lang) => {
		return uniqueTags.flatMap((tag) => {
			const postsFilteredByTag = getPostsByTag(tag, allPostsByDate);
			const postsFilteredByLang = filterByLanguage(
				postsFilteredByTag,
				lang as SupportedLanguage,
			);
			return paginate(postsFilteredByLang, {
				params: { lang, tag },
				pageSize: siteConfig.settings.paginationSize,
			});
		});
	});
};

interface Props {
	page: Page<CollectionEntry<"blog">>;
}

const { page } = Astro.props;
const { tag, lang } = Astro.params;

const meta = {
	title: `Tag: ${tag}`,
	description: `View all posts with the tag - ${tag}`,
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			url: page.url.prev,
			text: `← Previous Tags`,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			url: page.url.next,
			text: `Next Tags →`,
		},
	}),
};
---

<BaseLayout title={meta.title} description={meta.description}>
	<h1 class="title flex items-center">
		<a href={`/${lang}/tags/`} class="text-accent sm:hover:underline"
			>Tags</a
		>
		<span class="me-3 ms-2">→</span>
		<span>#{tag}</span>
	</h1>
	<ul class="flex flex-col gap-4">
		{page.data.map((post) => <PostPreview post={post} withDesc />)}
	</ul>
	<Pagination {...paginationProps} />
</BaseLayout>
